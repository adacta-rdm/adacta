import { assertDefined } from "@omegadot/assert";
import React from "react";
import { graphql, useFragment } from "react-relay";

import { Changelog } from "./Changelog";
import { RoundedIcon } from "./RoundedIcon";
import { NoteWithEditor } from "../note/NoteWithEditor";

import type { ChangelogWithNotes$key } from "@/relay/ChangelogWithNotes.graphql";
import { createDate } from "~/lib/createDate";

interface IProps {
	data: ChangelogWithNotes$key;
}

export function ChangelogWithNotes(props: IProps) {
	const data = useFragment(
		graphql`
			fragment ChangelogWithNotes on Node {
				...Changelog
				... on Device {
					id
					notes {
						__id
						edges {
							node {
								begin
								...NoteWithEditorFragment
							}
						}
					}
				}
				... on Sample {
					id
					notes {
						__id
						edges {
							node {
								begin
								...NoteWithEditorFragment
							}
						}
					}
				}
			}
		`,
		props.data
	);

	return (
		<Changelog
			data={data}
			additionalEvents={data.notes?.edges
				.map((e) => e.node)
				.map((n) => {
					assertDefined(n.begin);

					// Types generated by relay are strange this makes it hard/impossible to do a
					// __typename != "%other" assertion (or similar)
					assertDefined(data.notes?.__id);
					assertDefined(data.id);

					return {
						time: createDate(n.begin),
						info: {
							icon: <RoundedIcon iconType={"notebookApp"} color={"highlight"} />,
							children: (
								<NoteWithEditor note={n} connections={[data.notes.__id]} thingId={data.id} />
							),
						},
					};
				})}
		/>
	);
}
